{"version":3,"file":"vendor-W_U67ldY.js","sources":["../../node_modules/timer-node/src/timer.js","../../node_modules/timer-node/index.js"],"sourcesContent":["/**\n * timer-node\n * @copyright 2021 Eyas Ranjous\n * @license MIT\n */\n\n/**\n * A timestamp-based timer that can be started, paused, resumed, and stopped.\n * @class\n */\nclass Timer {\n  /**\n   * Creates a new Timer instance.\n   * @constructor\n   * @param {TimerOptions} [options={}] - Optional configuration for initializing the timer.\n   */\n  constructor(options = {}) {\n    const {\n      label,\n      startTimestamp,\n      endTimestamp,\n      currentStartTimestamp,\n      pauseCount,\n      accumulatedMs\n    } = options;\n\n    const startTs = startTimestamp >= 0 && startTimestamp < Date.now()\n      ? startTimestamp\n      : undefined;\n\n    const endTs = startTs >= 0 && endTimestamp > 0 && endTimestamp > startTs\n      ? endTimestamp\n      : undefined;\n\n    const currentTs = currentStartTimestamp >= startTs\n      && (!endTs || currentStartTimestamp < endTs)\n      ? currentStartTimestamp\n      : startTs;\n\n    const isStarted = startTimestamp >= 0;\n    const isRunning = currentStartTimestamp !== undefined;\n    const wasPausedAtLeastOneTime = pauseCount > 0;\n    const isPaused = isStarted && !isRunning && wasPausedAtLeastOneTime;\n\n    this._label = label || '';\n    this._startTimestamp = startTs;\n    this._currentStartTimestamp = !isPaused ? currentTs : undefined;\n    this._endTimestamp = endTs;\n    this._pauseCount = pauseCount || 0;\n    this._accumulatedMs = accumulatedMs || 0;\n  }\n\n  /**\n   * Returns the label of this timer.\n   * @returns {string}\n   */\n  getLabel() {\n    return this._label;\n  }\n\n  /**\n   * Checks if the timer has been started.\n   * @returns {boolean}\n   */\n  isStarted() {\n    return this._startTimestamp >= 0;\n  }\n\n  /**\n   * Checks if the timer is currently paused.\n   * @returns {boolean}\n   */\n  isPaused() {\n    return this.isStarted() && this._currentStartTimestamp === undefined;\n  }\n\n  /**\n   * Checks if the timer is stopped.\n   * @returns {boolean}\n   */\n  isStopped() {\n    return this._endTimestamp > 0;\n  }\n\n  /**\n   * Checks if the timer is running (started but neither paused nor stopped).\n   * @returns {boolean}\n   */\n  isRunning() {\n    return this.isStarted() && !this.isPaused() && !this.isStopped();\n  }\n\n  /**\n   * Starts (or restarts) the timer. If already running and not stopped, this does nothing.\n   * @returns {Timer} The timer instance (for method chaining).\n   */\n  start() {\n    if (this.isStarted() && !this.isStopped()) {\n      return this;\n    }\n    this.clear();\n    this._startTimestamp = Date.now();\n    this._currentStartTimestamp = this._startTimestamp;\n    return this;\n  }\n\n  /**\n   * Pauses the timer if it's currently running.\n   * @returns {Timer} The timer instance (for method chaining).\n   */\n  pause() {\n    if (this.isPaused() || !this.isStarted() || this.isStopped()) {\n      return this;\n    }\n\n    this._pauseCount += 1;\n    this._accumulatedMs += Date.now() - this._currentStartTimestamp;\n    this._currentStartTimestamp = undefined;\n    return this;\n  }\n\n  /**\n   * Resumes the timer if it's currently paused.\n   * @returns {Timer} The timer instance (for method chaining).\n   */\n  resume() {\n    if (!this.isPaused() || this.isStopped()) {\n      return this;\n    }\n\n    this._currentStartTimestamp = Date.now();\n    return this;\n  }\n\n  /**\n   * Stops the timer if it's started (running or paused).\n   * @returns {Timer} The timer instance (for method chaining).\n   */\n  stop() {\n    if (!this.isStarted()) {\n      return this;\n    }\n\n    this._endTimestamp = Date.now();\n    return this;\n  }\n\n  /**\n   * Returns the elapsed running time in milliseconds.\n   * - If the timer is running, the return value increases over time.\n   * - If the timer is paused or stopped, the value is frozen until resumed or restarted.\n   * @returns {number}\n   */\n  ms() {\n    if (!this.isStarted()) {\n      return 0;\n    }\n\n    if (this.isPaused()) {\n      return this._accumulatedMs;\n    }\n\n    const endTimestamp = this._endTimestamp || Date.now();\n    const currentMs = endTimestamp - this._currentStartTimestamp;\n    return currentMs + this._accumulatedMs;\n  }\n\n  /**\n   * Returns the paused duration in milliseconds.\n   * - If the timer is paused, this value increases over time until resumed.\n   * - If the timer is running, this returns the total accumulated pause time up to now.\n   * @returns {number}\n   */\n  pauseMs() {\n    if (!this.isStarted()) {\n      return 0;\n    }\n\n    const endTimestamp = this._endTimestamp || Date.now();\n    return (endTimestamp - this._startTimestamp) - this.ms();\n  }\n\n  /**\n   * Converts a millisecond count into a time breakdown (days, hours, minutes, seconds, ms).\n   * @private\n   * @param {number} ms - The millisecond value to convert.\n   * @returns {Time} An object containing { d, h, m, s, ms }.\n   */\n  _getTime(ms) {\n    const s = Math.floor(ms / 1000);\n    const m = Math.floor(s / 60);\n    const h = Math.floor(m / 60);\n    const d = Math.floor(h / 24);\n\n    return {\n      ms: ms % 1000,\n      s: s % 60,\n      m: m % 60,\n      h: h % 24,\n      d\n    };\n  }\n\n  /**\n   * Returns the elapsed running time as a time breakdown (days, hours, minutes, seconds, ms).\n   * @returns {Time}\n   */\n  time() {\n    return this._getTime(this.ms());\n  }\n\n  /**\n   * Returns the total pause time as a time breakdown (days, hours, minutes, seconds, ms).\n   * @returns {Time}\n   */\n  pauseTime() {\n    return this._getTime(this.pauseMs());\n  }\n\n  /**\n   * Returns how many times the timer has been paused.\n   * @returns {number}\n   */\n  pauseCount() {\n    return this._pauseCount;\n  }\n\n  /**\n   * Returns the start timestamp (in ms) if the timer has been started, otherwise undefined.\n   * @returns {number|undefined}\n   */\n  startedAt() {\n    return this._startTimestamp;\n  }\n\n  /**\n   * Returns the stop timestamp (in ms) if the timer has been stopped, otherwise undefined.\n   * @returns {number|undefined}\n   */\n  stoppedAt() {\n    return this._endTimestamp;\n  }\n\n  /**\n   * Formats the elapsed running time using placeholders.\n   * - %label: Timer label\n   * - %ms:   Milliseconds\n   * - %s:    Seconds\n   * - %m:    Minutes\n   * - %h:    Hours\n   * - %d:    Days\n   *\n   * @param {string} [template='%label%d d, %h h, %m m, %s s, %ms ms']\n   * @returns {string} - The formatted time string.\n   */\n  format(template = '%label%d d, %h h, %m m, %s s, %ms ms') {\n    const t = this.time();\n    return template\n      .replace('%label', this._label ? `${this._label}: ` : '')\n      .replace('%ms', t.ms)\n      .replace('%s', t.s)\n      .replace('%m', t.m)\n      .replace('%h', t.h)\n      .replace('%d', t.d);\n  }\n\n  /**\n   * Clears the timer, resetting it to an unstarted state.\n   * @returns {Timer} The timer instance (for method chaining).\n   */\n  clear() {\n    this._startTimestamp = undefined;\n    this._currentStartTimestamp = undefined;\n    this._endTimestamp = undefined;\n    this._accumulatedMs = 0;\n    this._pauseCount = 0;\n    return this;\n  }\n\n  /**\n   * Serializes the timer's current state to a JSON string.\n   * @returns {string}\n   */\n  serialize() {\n    return JSON.stringify({\n      startTimestamp: this._startTimestamp,\n      currentStartTimestamp: this._currentStartTimestamp,\n      endTimestamp: this._endTimestamp,\n      accumulatedMs: this._accumulatedMs,\n      pauseCount: this._pauseCount,\n      label: this._label\n    });\n  }\n\n  /**\n   * Deserializes a timer from a JSON string and returns a new Timer instance.\n   * @static\n   * @param {string} serializedTimer - The JSON string created by `timer.serialize()`.\n   * @returns {Timer} A new Timer instance based on the serialized data.\n   */\n  static deserialize(serializedTimer) {\n    return new Timer(JSON.parse(serializedTimer));\n  }\n\n  /**\n   * Creates a Timer instance to measure the execution time of a synchronous function.\n   * @static\n   * @param {Function} fn - The function to benchmark.\n   * @throws {Error} If `fn` is not a function.\n   * @returns {Timer} A stopped Timer instance reflecting how long `fn` took to execute.\n   */\n  static benchmark(fn) {\n    if (typeof fn !== 'function') {\n      throw new Error('Timer.benchmark expects a function');\n    }\n    const timer = new Timer({ label: fn.name }).start();\n    fn();\n    return timer.stop();\n  }\n}\n\nexports.Timer = Timer;\n","const { Timer } = require('./src/timer');\n\nexports.Timer = Timer;\n"],"names":["Timer$1","Timer","options","label","startTimestamp","endTimestamp","currentStartTimestamp","pauseCount","accumulatedMs","startTs","endTs","currentTs","isStarted","isRunning","wasPausedAtLeastOneTime","isPaused","ms","s","m","h","d","template","t","serializedTimer","fn","timer","require$$0","Timer_1"],"mappings":"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","x_google_ignoreList":[0,1]}